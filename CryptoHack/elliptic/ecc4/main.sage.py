

# This file was *autogenerated* from the file ecc4/main.sage
from sage.all_cmdline import *   # import sage library

_sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_16 = Integer(16); _sage_const_9739 = Integer(9739); _sage_const_497 = Integer(497); _sage_const_1768 = Integer(1768); _sage_const_4726 = Integer(4726); _sage_const_6534 = Integer(6534)
from sage.all import *

from Crypto.Cipher import AES
from Crypto.Util.Padding import pad, unpad
import hashlib


def is_pkcs7_padded(message):
    padding = message[-message[-_sage_const_1 ] :]
    return all(padding[i] == len(padding) for i in range(_sage_const_0 , len(padding)))


def decrypt_flag(shared_secret: int, iv: str, ciphertext: str):
    # Derive AES key from shared secret
    sha1 = hashlib.sha1()
    sha1.update(str(shared_secret).encode("ascii"))
    key = sha1.digest()[:_sage_const_16 ]
    # Decrypt flag
    ciphertext = bytes.fromhex(ciphertext)
    iv = bytes.fromhex(iv)
    cipher = AES.new(key, AES.MODE_CBC, iv)
    plaintext = cipher.decrypt(ciphertext)

    if is_pkcs7_padded(plaintext):
        return unpad(plaintext, _sage_const_16 ).decode("ascii")
    else:
        return plaintext.decode("ascii")


def main():
    E = EllipticCurve(GF(_sage_const_9739 ), [_sage_const_497 , _sage_const_1768 ])
    P = E.lift_x(_sage_const_4726 )
    n_B = _sage_const_6534 
    shared_point = n_B * P
    x, y = shared_point.xy()
    iv = "cd9da9f1c60925922377ea952afc212c"
    ciphertext = "febcbe3a3414a730b125931dccf912d2239f3e969c4334d95ed0ec86f6449ad8"
    print(decrypt_flag(x, iv, ciphertext))


if __name__ == "__main__":
    main()

